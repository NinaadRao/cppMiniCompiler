#include<iostream>


int main(){ int i=0; int l; int k; for(k=5;k<10;k++){ int j; for(l=0;l<5;l++){ int p=0; } } while(i>5){ int j=5; while(j>4){ j--; } i++; } for(k=5;k<10;k++){ while(j>4){ j--; } } i=0; while(i<5){ for(l=0;l<5;l++){ int p=0; } i++; } int a = i+j+k*l;
}

Preorder traversal of the abstract syntax tree
( main  int (   (   (   ( =  i  0 ) l ) k )(   (   (   (   (   ( for ( =  k  5 )(   (   ( <  k  10 )(    j ( for ( =  l  0 )(   (   ( <  l  5 )( =  p  0 ))( ++  l )))))( ++  k )))( while ( >  i  5 )(   ( =  j  5 )(   ( while ( >  j  4 )( --  j ))( ++  i )))))( for ( =  k  5 )(   (   ( <  k  10 )( while ( >  j  4 )( --  j )))( ++  k ))))( =  i  0 ))( while ( <  i  5 )(   ( for ( =  l  0 )(   (   ( <  l  5 )( =  p  0 ))( ++  l )))( ++  i ))))( =  a ( + ( +  i  j )( *  k  l ))))))



Tree
(main)
 \__(int)
 \__( )
     \__( )
     |   \__( )
     |   |   \__(=)
     |   |   |   \__(i)
     |   |   |   \__(0)
     |   |   \__(l)
     |   \__(k)
     \__( )
         \__( )
         |   \__( )
         |   |   \__( )
         |   |   |   \__( )
         |   |   |   |   \__(for)
         |   |   |   |   |   \__(=)
         |   |   |   |   |   |   \__(k)
         |   |   |   |   |   |   \__(5)
         |   |   |   |   |   \__( )
         |   |   |   |   |       \__( )
         |   |   |   |   |       |   \__(<)
         |   |   |   |   |       |   |   \__(k)
         |   |   |   |   |       |   |   \__(10)
         |   |   |   |   |       |   \__( )
         |   |   |   |   |       |       \__(j)
         |   |   |   |   |       |       \__(for)
         |   |   |   |   |       |           \__(=)
         |   |   |   |   |       |           |   \__(l)
         |   |   |   |   |       |           |   \__(0)
         |   |   |   |   |       |           \__( )
         |   |   |   |   |       |               \__( )
         |   |   |   |   |       |               |   \__(<)
         |   |   |   |   |       |               |   |   \__(l)
         |   |   |   |   |       |               |   |   \__(5)
         |   |   |   |   |       |               |   \__(=)
         |   |   |   |   |       |               |       \__(p)
         |   |   |   |   |       |               |       \__(0)
         |   |   |   |   |       |               \__(++)
         |   |   |   |   |       |                   \__(l)
         |   |   |   |   |       \__(++)
         |   |   |   |   |           \__(k)
         |   |   |   |   \__(while)
         |   |   |   |       \__(>)
         |   |   |   |       |   \__(i)
         |   |   |   |       |   \__(5)
         |   |   |   |       \__( )
         |   |   |   |           \__(=)
         |   |   |   |           |   \__(j)
         |   |   |   |           |   \__(5)
         |   |   |   |           \__( )
         |   |   |   |               \__(while)
         |   |   |   |               |   \__(>)
         |   |   |   |               |   |   \__(j)
         |   |   |   |               |   |   \__(4)
         |   |   |   |               |   \__(--)
         |   |   |   |               |       \__(j)
         |   |   |   |               \__(++)
         |   |   |   |                   \__(i)
         |   |   |   \__(for)
         |   |   |       \__(=)
         |   |   |       |   \__(k)
         |   |   |       |   \__(5)
         |   |   |       \__( )
         |   |   |           \__( )
         |   |   |           |   \__(<)
         |   |   |           |   |   \__(k)
         |   |   |           |   |   \__(10)
         |   |   |           |   \__(while)
         |   |   |           |       \__(>)
         |   |   |           |       |   \__(j)
         |   |   |           |       |   \__(4)
         |   |   |           |       \__(--)
         |   |   |           |           \__(j)
         |   |   |           \__(++)
         |   |   |               \__(k)
         |   |   \__(=)
         |   |       \__(i)
         |   |       \__(0)
         |   \__(while)
         |       \__(<)
         |       |   \__(i)
         |       |   \__(5)
         |       \__( )
         |           \__(for)
         |           |   \__(=)
         |           |   |   \__(l)
         |           |   |   \__(0)
         |           |   \__( )
         |           |       \__( )
         |           |       |   \__(<)
         |           |       |   |   \__(l)
         |           |       |   |   \__(5)
         |           |       |   \__(=)
         |           |       |       \__(p)
         |           |       |       \__(0)
         |           |       \__(++)
         |           |           \__(l)
         |           \__(++)
         |               \__(i)
         \__(=)
             \__(a)
             \__(+)
                 \__(+)
                 |   \__(i)
                 |   \__(j)
                 \__(*)
                     \__(k)
                     \__(l)



Parsing is successful


