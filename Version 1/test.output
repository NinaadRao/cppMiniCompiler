Terminals unused in grammar

   AND
   OR
   DP
   DM


State 44 conflicts: 1 shift/reduce
State 45 conflicts: 1 shift/reduce


Grammar

    0 $accept: init $end

    1 init: init declaration
    2     | init func_declaration
    3     | %empty

    4 declaration: type assignment_st ';'
    5            | assignment_st ';'
    6            | type array_st ';'

    7 array_st: ID '[' NUM ']'

    8 func_declaration: type ID '(' arg_list_optional ')' compound_st

    9 compound_st: '{' statement_structure '}'

   10 statement_structure: statement_structure statement
   11                    | statement

   12 statement: declaration
   13          | while_stmt
   14          | for_stmt
   15          | if_stmt

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

   17 while_stmt: WHILE '(' expression ')' statement
   18           | WHILE '(' expression ')' compound_st

   19 start_if_stmt: IF '(' expression ')' statement

   20 start_if_compound_st: IF '(' expression ')' compound_st

   21 if_stmt: start_if_stmt
   22        | start_if_compound_st
   23        | start_if_stmt ELSE statement
   24        | start_if_stmt ELSE compound_st
   25        | start_if_compound_st ELSE statement
   26        | start_if_compound_st ELSE compound_st

   27 arg_list_optional: arg_list_actual
   28                  | %empty

   29 arg_list_actual: arg_list_actual ',' arg_final
   30                | arg_final

   31 arg_final: type ID

   32 assignment_st: ID '=' ID
   33              | ID '=' NUM
   34              | ID

   35 type: INT
   36     | FLOAT
   37     | CHAR
   38     | DOUBLE
   39     | VOID

   40 expression: expression LE expression
   41           | expression GE expression
   42           | expression NE expression
   43           | expression EQ expression
   44           | expression GT expression
   45           | expression LT expression
   46           | ID
   47           | NUM


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 16 17 18 19 20
')' (41) 8 16 17 18 19 20
',' (44) 29
';' (59) 4 5 6 16
'=' (61) 32 33
'[' (91) 7
']' (93) 7
'{' (123) 9
'}' (125) 9
error (256)
ID (258) 7 8 31 32 33 34 46
NUM (259) 7 33 47
INT (260) 35
FLOAT (261) 36
CHAR (262) 37
DOUBLE (263) 38
VOID (264) 39
FOR (265) 16
WHILE (266) 17 18
IF (267) 19 20
ELSE (268) 23 24 25 26
AND (269)
OR (270)
LE (271) 40
GE (272) 41
EQ (273) 43
NE (274) 42
LT (275) 45
GT (276) 44
DP (277)
DM (278)


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
init (34)
    on left: 1 2 3, on right: 0 1 2
declaration (35)
    on left: 4 5 6, on right: 1 12
array_st (36)
    on left: 7, on right: 6
func_declaration (37)
    on left: 8, on right: 2
compound_st (38)
    on left: 9, on right: 8 16 18 20 24 26
statement_structure (39)
    on left: 10 11, on right: 9 10
statement (40)
    on left: 12 13 14 15, on right: 10 11 16 17 19 23 25
for_stmt (41)
    on left: 16, on right: 14
while_stmt (42)
    on left: 17 18, on right: 13
start_if_stmt (43)
    on left: 19, on right: 21 23 24
start_if_compound_st (44)
    on left: 20, on right: 22 25 26
if_stmt (45)
    on left: 21 22 23 24 25 26, on right: 15
arg_list_optional (46)
    on left: 27 28, on right: 8
arg_list_actual (47)
    on left: 29 30, on right: 27 29
arg_final (48)
    on left: 31, on right: 29 30
assignment_st (49)
    on left: 32 33 34, on right: 4 5 16
type (50)
    on left: 35 36 37 38 39, on right: 4 6 8 31
expression (51)
    on left: 40 41 42 43 44 45 46 47, on right: 16 17 18 19 20 40 41
    42 43 44 45


State 0

    0 $accept: . init $end

    $default  reduce using rule 3 (init)

    init  go to state 1


State 1

    0 $accept: init . $end
    1 init: init . declaration
    2     | init . func_declaration

    $end    shift, and go to state 2
    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8

    declaration       go to state 9
    func_declaration  go to state 10
    assignment_st     go to state 11
    type              go to state 12


State 2

    0 $accept: init $end .

    $default  accept


State 3

   32 assignment_st: ID . '=' ID
   33              | ID . '=' NUM
   34              | ID .

    '='  shift, and go to state 13

    $default  reduce using rule 34 (assignment_st)


State 4

   35 type: INT .

    $default  reduce using rule 35 (type)


State 5

   36 type: FLOAT .

    $default  reduce using rule 36 (type)


State 6

   37 type: CHAR .

    $default  reduce using rule 37 (type)


State 7

   38 type: DOUBLE .

    $default  reduce using rule 38 (type)


State 8

   39 type: VOID .

    $default  reduce using rule 39 (type)


State 9

    1 init: init declaration .

    $default  reduce using rule 1 (init)


State 10

    2 init: init func_declaration .

    $default  reduce using rule 2 (init)


State 11

    5 declaration: assignment_st . ';'

    ';'  shift, and go to state 14


State 12

    4 declaration: type . assignment_st ';'
    6            | type . array_st ';'
    8 func_declaration: type . ID '(' arg_list_optional ')' compound_st

    ID  shift, and go to state 15

    array_st       go to state 16
    assignment_st  go to state 17


State 13

   32 assignment_st: ID '=' . ID
   33              | ID '=' . NUM

    ID   shift, and go to state 18
    NUM  shift, and go to state 19


State 14

    5 declaration: assignment_st ';' .

    $default  reduce using rule 5 (declaration)


State 15

    7 array_st: ID . '[' NUM ']'
    8 func_declaration: type ID . '(' arg_list_optional ')' compound_st
   32 assignment_st: ID . '=' ID
   33              | ID . '=' NUM
   34              | ID .

    '='  shift, and go to state 13
    '['  shift, and go to state 20
    '('  shift, and go to state 21

    $default  reduce using rule 34 (assignment_st)


State 16

    6 declaration: type array_st . ';'

    ';'  shift, and go to state 22


State 17

    4 declaration: type assignment_st . ';'

    ';'  shift, and go to state 23


State 18

   32 assignment_st: ID '=' ID .

    $default  reduce using rule 32 (assignment_st)


State 19

   33 assignment_st: ID '=' NUM .

    $default  reduce using rule 33 (assignment_st)


State 20

    7 array_st: ID '[' . NUM ']'

    NUM  shift, and go to state 24


State 21

    8 func_declaration: type ID '(' . arg_list_optional ')' compound_st

    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8

    $default  reduce using rule 28 (arg_list_optional)

    arg_list_optional  go to state 25
    arg_list_actual    go to state 26
    arg_final          go to state 27
    type               go to state 28


State 22

    6 declaration: type array_st ';' .

    $default  reduce using rule 6 (declaration)


State 23

    4 declaration: type assignment_st ';' .

    $default  reduce using rule 4 (declaration)


State 24

    7 array_st: ID '[' NUM . ']'

    ']'  shift, and go to state 29


State 25

    8 func_declaration: type ID '(' arg_list_optional . ')' compound_st

    ')'  shift, and go to state 30


State 26

   27 arg_list_optional: arg_list_actual .
   29 arg_list_actual: arg_list_actual . ',' arg_final

    ','  shift, and go to state 31

    $default  reduce using rule 27 (arg_list_optional)


State 27

   30 arg_list_actual: arg_final .

    $default  reduce using rule 30 (arg_list_actual)


State 28

   31 arg_final: type . ID

    ID  shift, and go to state 32


State 29

    7 array_st: ID '[' NUM ']' .

    $default  reduce using rule 7 (array_st)


State 30

    8 func_declaration: type ID '(' arg_list_optional ')' . compound_st

    '{'  shift, and go to state 33

    compound_st  go to state 34


State 31

   29 arg_list_actual: arg_list_actual ',' . arg_final

    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8

    arg_final  go to state 35
    type       go to state 28


State 32

   31 arg_final: type ID .

    $default  reduce using rule 31 (arg_final)


State 33

    9 compound_st: '{' . statement_structure '}'

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38

    declaration           go to state 39
    statement_structure   go to state 40
    statement             go to state 41
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 34

    8 func_declaration: type ID '(' arg_list_optional ')' compound_st .

    $default  reduce using rule 8 (func_declaration)


State 35

   29 arg_list_actual: arg_list_actual ',' arg_final .

    $default  reduce using rule 29 (arg_list_actual)


State 36

   16 for_stmt: FOR . '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    '('  shift, and go to state 48


State 37

   17 while_stmt: WHILE . '(' expression ')' statement
   18           | WHILE . '(' expression ')' compound_st

    '('  shift, and go to state 49


State 38

   19 start_if_stmt: IF . '(' expression ')' statement
   20 start_if_compound_st: IF . '(' expression ')' compound_st

    '('  shift, and go to state 50


State 39

   12 statement: declaration .

    $default  reduce using rule 12 (statement)


State 40

    9 compound_st: '{' statement_structure . '}'
   10 statement_structure: statement_structure . statement

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    '}'     shift, and go to state 51

    declaration           go to state 39
    statement             go to state 52
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 41

   11 statement_structure: statement .

    $default  reduce using rule 11 (statement_structure)


State 42

   14 statement: for_stmt .

    $default  reduce using rule 14 (statement)


State 43

   13 statement: while_stmt .

    $default  reduce using rule 13 (statement)


State 44

   21 if_stmt: start_if_stmt .
   23        | start_if_stmt . ELSE statement
   24        | start_if_stmt . ELSE compound_st

    ELSE  shift, and go to state 53

    ELSE      [reduce using rule 21 (if_stmt)]
    $default  reduce using rule 21 (if_stmt)


State 45

   22 if_stmt: start_if_compound_st .
   25        | start_if_compound_st . ELSE statement
   26        | start_if_compound_st . ELSE compound_st

    ELSE  shift, and go to state 54

    ELSE      [reduce using rule 22 (if_stmt)]
    $default  reduce using rule 22 (if_stmt)


State 46

   15 statement: if_stmt .

    $default  reduce using rule 15 (statement)


State 47

    4 declaration: type . assignment_st ';'
    6            | type . array_st ';'

    ID  shift, and go to state 55

    array_st       go to state 16
    assignment_st  go to state 17


State 48

   16 for_stmt: FOR '(' . assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    ID  shift, and go to state 3

    assignment_st  go to state 56


State 49

   17 while_stmt: WHILE '(' . expression ')' statement
   18           | WHILE '(' . expression ')' compound_st

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 59


State 50

   19 start_if_stmt: IF '(' . expression ')' statement
   20 start_if_compound_st: IF '(' . expression ')' compound_st

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 60


State 51

    9 compound_st: '{' statement_structure '}' .

    $default  reduce using rule 9 (compound_st)


State 52

   10 statement_structure: statement_structure statement .

    $default  reduce using rule 10 (statement_structure)


State 53

   23 if_stmt: start_if_stmt ELSE . statement
   24        | start_if_stmt ELSE . compound_st

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 33

    declaration           go to state 39
    compound_st           go to state 61
    statement             go to state 62
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 54

   25 if_stmt: start_if_compound_st ELSE . statement
   26        | start_if_compound_st ELSE . compound_st

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 33

    declaration           go to state 39
    compound_st           go to state 63
    statement             go to state 64
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 55

    7 array_st: ID . '[' NUM ']'
   32 assignment_st: ID . '=' ID
   33              | ID . '=' NUM
   34              | ID .

    '='  shift, and go to state 13
    '['  shift, and go to state 20

    $default  reduce using rule 34 (assignment_st)


State 56

   16 for_stmt: FOR '(' assignment_st . ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    ';'  shift, and go to state 65


State 57

   46 expression: ID .

    $default  reduce using rule 46 (expression)


State 58

   47 expression: NUM .

    $default  reduce using rule 47 (expression)


State 59

   17 while_stmt: WHILE '(' expression . ')' statement
   18           | WHILE '(' expression . ')' compound_st
   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    LE   shift, and go to state 66
    GE   shift, and go to state 67
    EQ   shift, and go to state 68
    NE   shift, and go to state 69
    LT   shift, and go to state 70
    GT   shift, and go to state 71
    ')'  shift, and go to state 72


State 60

   19 start_if_stmt: IF '(' expression . ')' statement
   20 start_if_compound_st: IF '(' expression . ')' compound_st
   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    LE   shift, and go to state 66
    GE   shift, and go to state 67
    EQ   shift, and go to state 68
    NE   shift, and go to state 69
    LT   shift, and go to state 70
    GT   shift, and go to state 71
    ')'  shift, and go to state 73


State 61

   24 if_stmt: start_if_stmt ELSE compound_st .

    $default  reduce using rule 24 (if_stmt)


State 62

   23 if_stmt: start_if_stmt ELSE statement .

    $default  reduce using rule 23 (if_stmt)


State 63

   26 if_stmt: start_if_compound_st ELSE compound_st .

    $default  reduce using rule 26 (if_stmt)


State 64

   25 if_stmt: start_if_compound_st ELSE statement .

    $default  reduce using rule 25 (if_stmt)


State 65

   16 for_stmt: FOR '(' assignment_st ';' . expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 74


State 66

   40 expression: expression LE . expression

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 75


State 67

   41 expression: expression GE . expression

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 76


State 68

   43 expression: expression EQ . expression

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 77


State 69

   42 expression: expression NE . expression

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 78


State 70

   45 expression: expression LT . expression

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 79


State 71

   44 expression: expression GT . expression

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 80


State 72

   17 while_stmt: WHILE '(' expression ')' . statement
   18           | WHILE '(' expression ')' . compound_st

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 33

    declaration           go to state 39
    compound_st           go to state 81
    statement             go to state 82
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 73

   19 start_if_stmt: IF '(' expression ')' . statement
   20 start_if_compound_st: IF '(' expression ')' . compound_st

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 33

    declaration           go to state 39
    compound_st           go to state 83
    statement             go to state 84
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 74

   16 for_stmt: FOR '(' assignment_st ';' expression . ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st
   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    LE   shift, and go to state 66
    GE   shift, and go to state 67
    EQ   shift, and go to state 68
    NE   shift, and go to state 69
    LT   shift, and go to state 70
    GT   shift, and go to state 71
    ';'  shift, and go to state 85


State 75

   40 expression: expression . LE expression
   40           | expression LE expression .
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    $default  reduce using rule 40 (expression)


State 76

   40 expression: expression . LE expression
   41           | expression . GE expression
   41           | expression GE expression .
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    $default  reduce using rule 41 (expression)


State 77

   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   43           | expression EQ expression .
   44           | expression . GT expression
   45           | expression . LT expression

    $default  reduce using rule 43 (expression)


State 78

   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   42           | expression NE expression .
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    $default  reduce using rule 42 (expression)


State 79

   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression
   45           | expression LT expression .

    $default  reduce using rule 45 (expression)


State 80

   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   44           | expression GT expression .
   45           | expression . LT expression

    $default  reduce using rule 44 (expression)


State 81

   18 while_stmt: WHILE '(' expression ')' compound_st .

    $default  reduce using rule 18 (while_stmt)


State 82

   17 while_stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 17 (while_stmt)


State 83

   20 start_if_compound_st: IF '(' expression ')' compound_st .

    $default  reduce using rule 20 (start_if_compound_st)


State 84

   19 start_if_stmt: IF '(' expression ')' statement .

    $default  reduce using rule 19 (start_if_stmt)


State 85

   16 for_stmt: FOR '(' assignment_st ';' expression ';' . assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    ID  shift, and go to state 3

    assignment_st  go to state 86


State 86

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st . ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    ')'  shift, and go to state 87


State 87

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' . statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    ID      shift, and go to state 3
    INT     shift, and go to state 4
    FLOAT   shift, and go to state 5
    CHAR    shift, and go to state 6
    DOUBLE  shift, and go to state 7
    VOID    shift, and go to state 8
    FOR     shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38

    declaration           go to state 39
    statement             go to state 88
    for_stmt              go to state 42
    while_stmt            go to state 43
    start_if_stmt         go to state 44
    start_if_compound_st  go to state 45
    if_stmt               go to state 46
    assignment_st         go to state 11
    type                  go to state 47


State 88

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement . FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    FOR  shift, and go to state 89


State 89

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR . '(' assignment_st ';' expression ';' assignment_st ')' compound_st

    '('  shift, and go to state 90


State 90

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' . assignment_st ';' expression ';' assignment_st ')' compound_st

    ID  shift, and go to state 3

    assignment_st  go to state 91


State 91

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st . ';' expression ';' assignment_st ')' compound_st

    ';'  shift, and go to state 92


State 92

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' . expression ';' assignment_st ')' compound_st

    ID   shift, and go to state 57
    NUM  shift, and go to state 58

    expression  go to state 93


State 93

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression . ';' assignment_st ')' compound_st
   40 expression: expression . LE expression
   41           | expression . GE expression
   42           | expression . NE expression
   43           | expression . EQ expression
   44           | expression . GT expression
   45           | expression . LT expression

    LE   shift, and go to state 66
    GE   shift, and go to state 67
    EQ   shift, and go to state 68
    NE   shift, and go to state 69
    LT   shift, and go to state 70
    GT   shift, and go to state 71
    ';'  shift, and go to state 94


State 94

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' . assignment_st ')' compound_st

    ID  shift, and go to state 3

    assignment_st  go to state 95


State 95

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st . ')' compound_st

    ')'  shift, and go to state 96


State 96

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' . compound_st

    '{'  shift, and go to state 33

    compound_st  go to state 97


State 97

   16 for_stmt: FOR '(' assignment_st ';' expression ';' assignment_st ')' statement FOR '(' assignment_st ';' expression ';' assignment_st ')' compound_st .

    $default  reduce using rule 16 (for_stmt)
